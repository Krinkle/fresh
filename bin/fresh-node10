#!/bin/bash -eu
#
# Fresh <https://gerrit.wikimedia.org/g/fresh>
#
# This is free and unencumbered software released into the public domain.

scriptversion='20.08.1 (2020-08-27)'
imagename=docker-registry.wikimedia.org/releng/node10-test-browser
imageversion=0.6.2
shortname=fresh-node10
mountsrc="$PWD"
mountdest="/"$(basename "$PWD")
welcometxt_suffix=
docker_args=()

# Parse options
allow_env_mw=
allow_net=
allow_root=
bind_git_ro=
for arg in "$@"; do
	case "$arg" in
		# Option: -env
		#   Forward "MW_*" and "MEDIAWIKI_*" environment variables from the host machine
		#   to the Fresh container. This is designed for use with MediaWiki browser and API tests.
		#   If a .env file exists in the directory, its MW_* and MEDIAWIKI_* environment
		#   variables will be forwarded to the container; the variables set in .env
		#   take precedence over variables set at runtime via e.g. export or .bashrc
		-env|-e|-env-mw) allow_env_mw=1 ;;
		# Option: -net
		#   This exposes network ports from the host machine to the Fresh container.
		#   For example, to enable access to a MediaWiki web server.
		#   https://docs.docker.com/network/network-tutorial-host/
		-net) allow_net=1 ;;
		# Option: -root
		#   Log into to the Fresh container user 'root' instead of 'nobody'.
		#   This means you can use sudo commands inside the container, such as apt-get.
		-root) allow_root=1 ;;
		*)
		echo "unknown option: $arg" 1>&2
		echo "usage: fresh-node [-env] [-net] [-root]" 1>&2
		exit 1
		;;
	esac
done

# Color codes. â€“ http://linux.101hacks.com/ps1-examples/prompt-color-using-tput/
# Tolerate lack of color support. â€“ https://phabricator.wikimedia.org/T251309
CLR_NONE=$(tput sgr0 2>/dev/null || true)
CLR_BOLD=$(tput bold 2>/dev/null || true)
CLR_GREEN=$(tput setaf 2 2>/dev/null || true)
CLR_YELLOW=$(tput setaf 3 2>/dev/null || true)
CLR_GREY=$(tput setaf 7 2>/dev/null || true)

if [ -e "$mountsrc/.git" ]; then
	bind_git_ro=1
	welcometxt_suffix+="#        $mountdest/.git âžŸ $mountsrc/.git (read-only)\n"
fi
if [ -n "$allow_env_mw" ]; then
	envfile="$(mktemp)"
	# Backslash for grep bypasses user-defined aliases. â€“ https://github.com/wikimedia/fresh/pull/7
	env | \grep -E 'MW_|MEDIAWIKI_' > "$envfile"
	# Copy the .env file contents to the temporary environment file. (T246586)
	# The .env file contents take precendence over runtime variables from e.g.
	# export or bashrc.
	if [ -f .env ]; then
		\grep -E 'MW_|MEDIAWIKI_' .env >> "$envfile"
	fi
	welcometxt_suffix+="# ${CLR_YELLOW}env: MW_*, MEDIAWIKI_*${CLR_NONE}\n"
	docker_args+=("--env-file" "$envfile")
	# Teardown: unlink tmp env file, restore window title
	trap "rm -f \"$envfile\"; echo -e '\033]2;\007'" 0 SIGTERM SIGINT
else
	# Teardown: restore window title
	trap "echo -e '\033]2;\007'" 0 SIGTERM SIGINT
fi
if [ -n "$allow_net" ]; then
	welcometxt_suffix+="# ${CLR_YELLOW}net: expose host${CLR_NONE}\n"
	docker_args+=("--network" "host")
fi
if [ -n "$allow_root" ]; then
	docker_args+=("--user" "root")
elif [ "$(uname -s)" == "Linux" ]; then
	docker_args+=("--user" "$(id -u):$(id -g)")
fi

# Setup: Change window title
echo -e '\033]2;'"$shortname"'\007\c'

welcomecmd="echo \"$CLR_GREY# fresh: $CLR_BOLD$scriptversion$CLR_NONE$CLR_GREY
# image: $imagename:$imageversion
# software: Debian GNU/Linux 9 (stretch)
#           Node.js v10.15.2 (npm 6.14.5)
#           Chromium 71.0.3578.80
#           Mozilla Firefox 68.11.0esr
#           JSDuck 5.3.4 (Ruby 2.3.3)
# mount: $mountdest      âžŸ $mountsrc      (read-write)
$welcometxt_suffix
ðŸŒ±  ${CLR_BOLD}${CLR_GREEN}Fresh!
$CLR_NONE\""
if [ -n "${FRESH_INTERNAL_RUNCMD:-}" ]; then
	runcmd="$FRESH_INTERNAL_RUNCMD"
else
	docker_args+=("--interactive" "--tty")
	runcmd=bash
fi

# We expand the $docker_args in a special way to avoid passing "",
# which would be misinterpreted as docker-run argument.
# See <https://stackoverflow.com/a/7577209/319266>

docker run --rm -e 'HOME=/tmp' \
	--mount type=bind,source="$mountsrc",target="$mountdest",consistency=delegated \
	$( if [ -n "$bind_git_ro" ]; then printf %s "--mount type=bind,source="$mountsrc"/.git,target="$mountdest"/.git,readonly,consistency=cached"; fi ) \
	${docker_args[@]+"${docker_args[@]}"} \
	--entrypoint /bin/sh \
	--security-opt label=disable \
	"$imagename:$imageversion" \
	-c "cd $mountdest/;$welcomecmd;$runcmd"

# Optimisation: Make startup faster by not doing file reads or shell
# commands to generate the welcome message. Instead, prior to a release:
#
# 1. Comment out the above 'docker run' command, and uncomment the one below,
# 2. Run bin/fresh, and update the above $welcomecmd value accordingly.
# 3. Undo step 1.

# welcomecmd=". /etc/os-release
# echo \"$CLR_YELLOW# image: $imagename:$imageversion
# # software: \$PRETTY_NAME
# #           Node.js \$(node --version) (npm \$(npm --version))
# #           Chromium \$(chromium --product-version)
# #           \$(firefox --version)
# #           \$(jsduck --version) \$(ruby --version)
# $CLR_NONE\""
# docker run --rm --interactive --tty --entrypoint /bin/sh \
#  "$imagename:$imageversion" \
#  -c "$welcomecmd;false"
