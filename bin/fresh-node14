#!/bin/bash -eu
#
# Fresh <https://gerrit.wikimedia.org/g/fresh>
#
# This is free and unencumbered software released into the public domain.

scriptversion='22.09.1'
imagename=docker-registry.wikimedia.org/releng/node14-test-browser
imageversion=0.0.2-s4
shortname=fresh-node14
mountsrc="$PWD"
mountdest="/"$(basename "$PWD")
instance_tmp_name="fresh_$(basename "$PWD")_$RANDOM"
welcometxt_suffix=
envfile=
docker_args=()

# Parse options
allow_env_mw=
allow_env_sauce=
allow_net=
allow_root=
use_podman=
bind_git_ro=
bind_fastwrite=',consistency=delegated'
bind_fastread=',consistency=cached'
DOCKER_BIN=docker
for arg in "$@"; do
	case "$arg" in
		# Option: -env-mw
		#   Forward "MW_*" and "MEDIAWIKI_*" environment variables from the host machine
		#   to the Fresh container. This is designed for use with MediaWiki browser and API tests.
		#   If a .env file exists in the directory, its MW_* and MEDIAWIKI_* environment
		#   variables will be forwarded to the container; the variables set in .env
		#   take precedence over variables set at runtime via e.g. export or .bashrc
		-e|-env|-env-mw) allow_env_mw=1 ;;
		# Option: -env-sauce
		#   Forward "SAUCE_*" environment variables from the host machine to the Fresh container.
		#   This is designed for debugging browser tests involving webdriver and SauceLabs.
		-env-sauce) allow_env_sauce=1 ;;
		# Option: -net
		#   This exposes network ports from the host machine to the Fresh container.
		#   For example, to enable access to a MediaWiki web server.
		#   https://docs.docker.com/network/network-tutorial-host/
		-net) allow_net=1 ;;
		# Option: -root
		#   Log into to the Fresh container user 'root' instead of 'nobody'.
		#   This means you can use sudo commands inside the container, such as apt-get.
		-root) allow_root=1 ;;
		# Option: -podman
		#   Force use of Podman instead of Docker.
		#   By default, Fresh uses whichever runtime is available, selecting Docker if both are.
		-podman) use_podman=1 ;;
		*)
		echo "unknown option: $arg" 1>&2
		echo "usage: $shortname [-env-mw] [-env-sauce] [-net] [-root] [-podman]" 1>&2
		echo "to run a specific command: FRESH_INTERNAL_RUNCMD=\"...cmd...\" $shortname" 1>&2
		exit 1
		;;
	esac
done

# Color codes. â€“ http://linux.101hacks.com/ps1-examples/prompt-color-using-tput/
# Tolerate lack of color support. â€“ https://phabricator.wikimedia.org/T251309
CLR_NONE=$(tput sgr0 2>/dev/null || true)
CLR_BOLD=$(tput bold 2>/dev/null || true)
CLR_RED=$(tput setaf 1 2>/dev/null || true)
CLR_GREEN=$(tput setaf 2 2>/dev/null || true)
CLR_YELLOW=$(tput setaf 3 2>/dev/null || true)
CLR_PINK=$(tput setaf 5 2>/dev/null || true)
CLR_GREY=$(tput setaf 7 2>/dev/null || true)

if [ -e "$mountsrc/.git" ]; then
	bind_git_ro=1
	welcometxt_suffix+="#        $mountdest/.git âžŸ $mountsrc/.git (read-only)\n"
fi
if [ -z "$use_podman" ]; then
	# Prefer `hash` over `which` or `command` for improved portability and
	# performance, specific to Bash. - https://stackoverflow.com/a/677212/319266
	if ! hash docker 2>/dev/null && hash podman 2>/dev/null; then
		use_podman=1
	fi
fi
if [ -n "$use_podman" ]; then
	DOCKER_BIN=podman
	# The 'consistency' bind options are not supported by Podman.
	# - https://phabricator.wikimedia.org/T259974#6713393
	bind_fastwrite=
	bind_fastread=
	welcometxt_suffix+="# ${CLR_PINK}runtime: podman${CLR_NONE}\n"
fi
if [ -n "$allow_env_mw" ] || [ -n "$allow_env_sauce" ]; then
	envfile="$(mktemp)"
	docker_args+=("--env-file" "$envfile")
fi
if [ -n "$allow_env_mw" ]; then
	# Backslash for grep bypasses user-defined aliases. â€“ https://github.com/wikimedia/fresh/pull/7
	mwenvtext=$(env | \grep -E 'MW_|MEDIAWIKI_' || true)
	# Also consider any ".env" file in the current working directory (T246586)
	# The env file takes precendence over runtime variables from bash exports or bashrc.
	if [ -f .env ]; then
		mwenvtext="${mwenvtext}\n$(\grep -E 'MW_|MEDIAWIKI_' .env)"
	fi
	# Check if we got at least one non-empty non-whitespace line
	if printf "$mwenvtext" | grep "\S" >> "$envfile"; then
		welcometxt_suffix+="# ${CLR_YELLOW}env: MW_*, MEDIAWIKI_*${CLR_NONE}\n"
	else
		welcometxt_suffix+="# ${CLR_RED}env: MW_*, MEDIAWIKI_* (none found)${CLR_NONE}\n"
	fi
fi
if [ -n "$allow_env_sauce" ]; then
	if env | \grep -E 'SAUCE_' >> "$envfile"; then
		welcometxt_suffix+="# ${CLR_YELLOW}env: SAUCE_*${CLR_NONE}\n"
	else
		welcometxt_suffix+="# ${CLR_RED}env: SAUCE_* (none found)${CLR_NONE}\n"
	fi
fi
if [ -n "$allow_net" ]; then
	welcometxt_suffix+="# ${CLR_YELLOW}net: expose host${CLR_NONE}\n"
	docker_args+=("--network" "host")
fi
if [ -n "$allow_root" ]; then
	docker_args+=("--user" "root")
elif [ "$(uname -s)" == "Linux" ]; then
	docker_args+=("--user" "$(id -u):$(id -g)")
	if [ -n "$use_podman" ]; then
		# Make sure host UID/GID are mapped into container,
		# see podman-run(1) manual.
		docker_args+=("--userns=keep-id")
	fi
fi

function teardown {
	# stop and remove temporary container
	# this should be redundant since 'docker run --rm' is meant to take care of
	# this already but at least with Terminal and Docker on macOS we know that
	# when the user closes their terminal tab, the fresh-node script is closed
	# properly (via trap), but the container keeps running for some reason.
	$DOCKER_BIN rm -f "$instance_tmp_name" >/dev/null 2>&1 || true
	# unlink tmp env file, if we used one.
	if [ -n "$envfile" ]; then
		rm -f "$envfile"
	fi
	# restore window title.
	echo -e '\033]2;\007'
}
trap teardown 0 SIGTERM SIGINT

# Setup: Change window title
echo -e '\033]2;'"$shortname"'\007\c'

# Optimisation: Make startup faster by not doing file reads or shell
# commands to generate the welcome message. Instead, prior to a release:
#
# 1. Run `FRESH_INTERNAL_RUNCMD=_fresh_versions ./bin/fresh-node`
# 2. Update the below $welcomecmd value accordingly.
#
welcomecmd="echo \"$CLR_GREY# fresh: $CLR_BOLD$scriptversion$CLR_NONE$CLR_GREY
# image: $imagename:$imageversion
# software: Debian GNU/Linux 11 (bullseye)
#           Node.js v14.17.5 (npm 7.21.0)
#           Chromium 97.0.4692.99
#           Mozilla Firefox 91.5.0esr
#           JSDuck 5.3.4 (Ruby 2.7.4) ruby 2.7.4p191
# mount: $mountdest      âžŸ $mountsrc      (read-write)
$welcometxt_suffix
ðŸŒ±  ${CLR_BOLD}${CLR_GREEN}Fresh!
$CLR_NONE\""
if [ -n "${FRESH_INTERNAL_RUNCMD:-}" ]; then
	runcmd="$FRESH_INTERNAL_RUNCMD"
	if [ "$runcmd" == "_fresh_versions" ]; then
		FRESH_INTERNAL_NOWELCOME=1
		runcmd=". /etc/os-release
printf \"\n# image: $imagename:$imageversion
# software: \$PRETTY_NAME
#           Node.js \$(node --version) (npm \$(npm --version))
#           Chromium \$(chromium --product-version)
#           \$(firefox --version)
#           \$(jsduck --version) \$(ruby --version | cut -d' ' -f1-2)\n\""
	fi
else
	docker_args+=("--interactive" "--tty")
	runcmd=bash
fi
if [ -z "${FRESH_INTERNAL_NOWELCOME:-}" ]; then
	runcmd="$welcomecmd;$runcmd"
fi

# We expand the $docker_args in a special way to avoid passing "",
# which would be misinterpreted as docker-run argument.
# See <https://stackoverflow.com/a/7577209/319266>

$DOCKER_BIN run --rm --name "$instance_tmp_name" -e 'HOME=/tmp' \
	--mount type=bind,source="$mountsrc",target="$mountdest"$bind_fastwrite \
	$( if [ -n "$bind_git_ro" ]; then printf %s "--mount type=bind,source="$mountsrc"/.git,target="$mountdest"/.git,readonly"$bind_fastread; fi ) \
	${docker_args[@]+"${docker_args[@]}"} \
	--entrypoint /bin/sh \
	--security-opt label=disable \
	"$imagename:$imageversion" \
	-c "cd $mountdest/;$runcmd"
