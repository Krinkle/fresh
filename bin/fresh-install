#!/usr/bin/env python3
"""
fresh-install <https://gerrit.wikimedia.org/g/fresh>

This is free and unencumbered software released into the public domain.
"""

import base64
import hashlib
import os
import stat
import sys
import urllib.request


# Inspired by https://gerrit.wikimedia.org/g/mediawiki/tools/scap/+/3.16.0/scap/ansi.py
clr_red = "\x1b[%sm" % (31)
clr_green = "\x1b[%sm" % (32)
clr_yellow = "\x1b[%sm" % (33)
clr_grey = "\x1b[%sm" % (37)
clr_none = "\x1b[%sm" % (39)

bin_candidates = [
    # Preferred location if writable by user (common on macOS)
    '/usr/local/bin',
    # Preferred standard home path
    # https://specifications.freedesktop.org/basedir-spec/
    # https://www.freedesktop.org/software/systemd/man/file-hierarchy.html
    '~/.local/bin',
    # Older convention that is often already in-use, whether by default
    # as on Ubuntu, or from the developer having set PATH this way.
    # https://bugs.launchpad.net/ubuntu/+source/bash/+bug/1588562
    # https://unix.stackexchange.com/a/392710/37512
    '~/bin',
]
# limit location candidates for fresh-npm because:
# - install_bin() must not overwrite the real npm,
# - absent_bin() must not delete the real npm,
# - fresh-npm:get_raw_npm() must remain able to find and point to
#   the path of the real npm (i.e. not misakenly point to itself).
#
# The downside is that, a subset of Intel Macs users may now have to do
# a one-time setup to add HOME to their PATH. This does not affect other
# users because for this to be needed you would need to:
# 1. not have HOME in PATH by default (i.e. Linux),
# 2. not yet added it yourself by now,
# 3. have a non-root owned writable /usr/local (Homebrew on macOS makes
#    it writable during its installation), and
# 4. are not on Apple ARM devices where Homebrew uses /opt instead.
#
# Everyone else either gets it by default, or did it already, or needs to do
# it regardless even for fresh-node.
npm_bin_candidates = [
    '~/.local/bin',
    '~/bin',
]

def install_bin_all(secure_npm=False):
    """
    Download, verify, and install a shell command.
    """

    # During development this can be a recent commit hash instead of a release tag,
    # to allow full testing prior to release.
    FRESH_VERSION='c39e1f2c4234749cbc5a2ed329116022c0a6556e'
    FRESH_NODE16_SHA256='93b98426e4bbbad04f16053108409cec0beb5b5fcbc33662cb359b619e2c8e5f'
    FRESH_NODE18_SHA256='aed7e4ef20c43da34446c93dc9b5ad344736895e59c85d4ec7867b1bc9603433'
    FRESH_NODE20_SHA256='f005ddd3081a0eabf3c8bd0edba6171793870d0cb3073c8e179e1a71779f7786'
    FRESH_NODE22_SHA256='2028ef73f5425894dc7df8ce7b10da7cb54a169674a5c81250d1e425d18f341c'

    FRESH_NPM_SHA256='4d46fedd6f222e6edf4f9b8924a2ead8a6771766e6a9972872e33c58b8a47db9'

    # Run get_bin_path first to improve message order
    # e.g. not "creating dir" between two "installing" messages
    get_bin_path(bin_candidates)
    install_bin(FRESH_VERSION, 'fresh-node16', FRESH_NODE16_SHA256, 'fresh-node16')
    install_bin(FRESH_VERSION, 'fresh-node18', FRESH_NODE18_SHA256, 'fresh-node18')
    install_bin(FRESH_VERSION, 'fresh-node20', FRESH_NODE20_SHA256, 'fresh-node')
    install_bin(FRESH_VERSION, 'fresh-node22', FRESH_NODE22_SHA256, 'fresh-node22')
    if secure_npm:
        install_bin(FRESH_VERSION, 'fresh-npm', FRESH_NPM_SHA256, 'npm')
    else:
        absent_bin('npm', 'gerrit.wikimedia.org/g/fresh', 'fresh-npm')

    absent_bin('fresh-node10')
    absent_bin('fresh-node12')
    absent_bin('fresh-node14')

    print('')
    print('%s  Fresh %s is now ready!' % (u'\U0001F331', FRESH_VERSION))


def debug_checksums():
    """
    Make and print new checksums.
    This is for use during release prep, to help update fresh-install.
    """
    make_checksum('fresh-node16')
    make_checksum('fresh-node18')
    make_checksum('fresh-node20')
    make_checksum('fresh-node22')
    make_checksum('fresh-npm')


def warning(message):
    print('%s%s%s' % (clr_yellow, message, clr_none))


def error_exit(message):
    print('fresh-install: %s' % (message), file=sys.stderr)
    print(u'\u274C')
    sys.exit(1)


def install_bin(version_src, cmd_src, cmd_integrity, cmd_dest):
    if cmd_src == 'fresh-npm':
        dest = os.path.join(get_bin_path(npm_bin_candidates), cmd_dest)
    else:
        dest = os.path.join(get_bin_path(bin_candidates), cmd_dest)

    print('%sinstalling %s to %s%s' % (clr_grey, cmd_src, dest, clr_none))

    # Download
    url = 'https://gerrit.wikimedia.org/g/fresh/+/%s/bin/%s?format=TEXT' % (version_src, cmd_src)
    req = urllib.request.Request(url, headers={
        'User-Agent': 'Fresh/%s (Bot) https://gerrit.wikimedia.org/g/fresh' % (version_src)
    })
    if os.getenv('FRESH_INTERNAL_TEST'):
        data = '#!/bin/bash\necho "Fake fresh-node"\n'.encode('utf-8')
        checksum = cmd_integrity
    else:
        try:
            with urllib.request.urlopen(req) as resp:
                data = resp.read().decode('utf-8')
        except urllib.error.HTTPError as e:
            error_exit('HTTP %s at %s' % (e.code, url))

        data = base64.b64decode(data)
        checksum = hashlib.sha256(data).hexdigest()

    # Verify
    if checksum != cmd_integrity:
        error_exit('checksum of %s does not match' % (cmd_src))

    # Store file
    content = str(data, encoding='utf-8')
    with open(dest, 'w') as f:
        f.write(content)

    # Make file executable
    current = os.stat(dest)
    os.chmod(dest, current.st_mode | stat.S_IEXEC)


def get_bin_path(candidates):
    bin_dir = False
    for candidate in candidates:
        candidate = os.path.expanduser(candidate)
        if not candidate in os.get_exec_path():
            continue
        if not os.path.isdir(candidate):
            try:
                os.makedirs(candidate, exist_ok=True)
                print('%screating %s%s' % (clr_grey, candidate, clr_none))
            except PermissionError:
                continue
        if not os.access(candidate, os.W_OK):
            continue
        bin_dir = candidate
        break

    if bin_dir is False:
        using_zsh = os.path.exists(os.path.expanduser('~/.zshrc'))
        shell_configuration = "~/.zshrc" if using_zsh else "~/.bashrc"
        # If we fail, recommend one that doesn't require sudo (e.g. standard home path)
        bin_recommend = '~/.local/bin'
        warning('Tried the following places: %s' % ', '.join(candidates))
        warning('Add "export PATH=$PATH%s%s" in %s and try again.' % (os.pathsep, bin_recommend, shell_configuration))
        error_exit('Could not find writable installation folder')

    return bin_dir


def absent_bin(cmd_dest, contains=None, cmd_src=None):
    for candidate in bin_candidates:
        candidate = os.path.expanduser(candidate)
        dest = os.path.join(candidate, cmd_dest)

        try:
            if contains is not None:
                with open(dest) as f:
                    # verify the contents to make sure we
                    # preserve the real npm, e.g. in /usr/local/bin,
                    # when fresh-npm is in $HOME
                    if not contains in f.read():
                        return
            os.remove(dest)
            print('%sremoving %s from %s%s' % (clr_grey, cmd_src or cmd_dest, dest, clr_none))
        except (FileNotFoundError, OSError) as e:
            # Ignore if already gone
            # Ignore if no permission to remove
            pass


def make_checksum(cmd_src):
    with open('./bin/%s' % cmd_src, 'r') as f:
        checksum = hashlib.sha256(f.read().encode('utf-8')).hexdigest()

    print('New checksum for %s: %s' % (cmd_src, checksum))


debug = (len(sys.argv) == 2 and sys.argv[1] == '--debug')
if debug:
    debug_checksums()
else:
    secure_npm = (len(sys.argv) == 2 and sys.argv[1] == '--secure-npm')
    install_bin_all(secure_npm)
