#!/bin/bash -eu
#
# Fresh <https://gerrit.wikimedia.org/g/fresh>
#
# This is free and unencumbered software released into the public domain.

scriptversion='23.08.1'
imagename=docker-registry.wikimedia.org/releng/node18-test-browser
imageversion=18.20.2-s1
shortname=fresh-node18
mountsrc="$PWD"
mountdest="/"$(basename "$PWD")
instance_tmp_name="fresh_$(basename "$PWD" | tr -cd 'a-zA-Z0-9_. \-' | tr ' ' '_')_$RANDOM"
welcometxt_suffix=
envfile=
docker_args=()
env_prefixes=()

# Parse options
allow_env_mw=
allow_net=
allow_root=
use_podman=
podman_reason=
bind_fastwrite=',consistency=delegated'
bind_fastread=',consistency=cached'
in_positional_args=
POSITIONAL_ARGS=()
DOCKER_BIN=docker

function enable_podman {
	use_podman=1
	podman_reason=$1
}

for arg in "$@"; do
	if [ -n "$in_positional_args" ]; then
		POSITIONAL_ARGS+=($arg)
		continue
	fi
	case "$arg" in
		# Option: -env-mw
		#   Forward `MW_*` and `MEDIAWIKI_*` environment variables from the host machine
		#   to the Fresh container. This is designed for use with MediaWiki tests.
		#   If an `.env` file exists in the current directory, its `MW_*` and `MEDIAWIKI_` entries
		#   will also be read and forwarded to the container.
		#   Note that the variables set in via `.env` take precedence over variables set at
		#   runtime e.g. from `export` commands in `.bashrc`.
		-e|-env|-env-mw) allow_env_mw=1 ;;
		# Option: -env-bs
		#   Forward `BROWSERSTACK_*` environment variables from the host to the Fresh container.
		#   This is designed for running tests involving BrowserStack.
		-env-bs) env_prefixes+=("BROWSERSTACK_") ;;
		# Option: -env-sauce
		#   Forward `SAUCE_*` environment variables from the host to the Fresh container.
		#   This is designed for debugging browser tests involving webdriver and SauceLabs.
		-env-sauce) env_prefixes+=("SAUCE_") ;;
		# Option: -env=PREFIX
		#   Forward any environment variables with a given prefix from the host to the Fresh container.
		#   To forward all environment variables, use `-env=`.
		-env=*|--env=*) env_prefixes+=("${arg#*=}") ;;
		# Option: -net
		#   This exposes network ports from the host machine to the Fresh container.
		#   For example, to enable access to a MediaWiki web server.
		#   https://docs.docker.com/network/network-tutorial-host/
		-net) allow_net=1 ;;
		# Option: -root
		#   Log into to the Fresh container user 'root' instead of 'nobody'.
		#   This means you can use sudo commands inside the container, such as apt-get.
		-root) allow_root=1 ;;
		# Option: -podman
		#   Force use of Podman instead of Docker.
		#   By default, Fresh uses whichever runtime is available, selecting Docker if both are.
		-podman) enable_podman "-podman option" ;;
		--) in_positional_args=1 ;;
		*)
		echo "unknown option: $arg" 1>&2
		echo "usage: $shortname [-env-mw] [-env-bs] [-env-sauce] [env=PREFIX] [-net] [-root] [-podman] [-- command]" 1>&2
		echo "to run a command in the container, pass it after --" 1>&2
		exit 1
		;;
	esac
done

# Color codes. â€“ http://linux.101hacks.com/ps1-examples/prompt-color-using-tput/
# Tolerate lack of color support. â€“ https://phabricator.wikimedia.org/T251309
CLR_NONE=$(tput sgr0 2>/dev/null || true)
CLR_BOLD=$(tput bold 2>/dev/null || true)
CLR_RED=$(tput setaf 1 2>/dev/null || true)
CLR_GREEN=$(tput setaf 2 2>/dev/null || true)
CLR_YELLOW=$(tput setaf 3 2>/dev/null || true)
CLR_PINK=$(tput setaf 5 2>/dev/null || true)
CLR_GREY=$(tput setaf 7 2>/dev/null || true)

if [ -z "$use_podman" ]; then
	# Prefer `hash` over `which` or `command` for improved portability and
	# performance, specific to Bash. - https://stackoverflow.com/a/677212/319266
	has_docker=
	if hash docker 2>/dev/null; then
		has_docker=1
	fi
	has_podman=
	if hash podman 2>/dev/null; then
		has_podman=1
	fi

	if [[ ! $has_docker ]] && [[ $has_podman ]]; then
		enable_podman "no docker found"
	elif [ -z "$use_podman" ] && [[ $has_docker ]] && [[ $has_podman ]]; then
		# In case `docker` is podman
		if [[ "$(docker -v)" = podman* ]]; then
			enable_podman "docker -v`` is podman"
		fi
	fi
fi
if [ -n "$use_podman" ]; then
	DOCKER_BIN=podman
	# The 'consistency' bind options are not supported by Podman.
	# - https://phabricator.wikimedia.org/T259974#6713393
	bind_fastwrite=
	bind_fastread=
	welcometxt_suffix+="\n# ${CLR_PINK}runtime: podman ($podman_reason)${CLR_NONE}"
fi
if [ -e "$mountsrc/.git" ]; then
	welcometxt_suffix+="\n#        $mountdest/.git âžŸ $mountsrc/.git (read-only)"
	docker_args+=("--mount" "type=bind,source=$mountsrc/.git,target=$mountdest/.git,readonly$bind_fastread")
fi
if [ -n "$allow_env_mw" ] || [ "${#env_prefixes[@]}" -ne 0 ]; then
	envfile="$(mktemp)"
	docker_args+=("--env-file" "$envfile")
fi
if [ -n "$allow_env_mw" ]; then
	# Backslash for grep bypasses user-defined aliases. â€“ https://github.com/wikimedia/fresh/pull/7
	mwenvtext=$(env | \grep -E '^(MW_|MEDIAWIKI_)' || true)
	# Also consider any ".env" file in the current working directory (T246586)
	# Do this last so that local .env takes precendence over global variables exported from bash.
	if [ -f .env ]; then
		mwenvtext="${mwenvtext}\n$(\grep -E '^(MW_|MEDIAWIKI_)' .env)"
	fi
	# Check if we got at least one non-empty non-whitespace line
	if printf "$mwenvtext" | grep "\S" >> "$envfile"; then
		welcometxt_suffix+="\n# ${CLR_YELLOW}env: MW_*, MEDIAWIKI_*${CLR_NONE}"
	else
		welcometxt_suffix+="\n# ${CLR_RED}env: MW_*, MEDIAWIKI_* (none found)${CLR_NONE}"
	fi
fi
if [ "${#env_prefixes[@]}" -ne 0 ]; then
	for envprefix in "${env_prefixes[@]}"; do
		if [ -n "$envprefix" ]; then
			if env | \grep -E "^$envprefix" >> "$envfile"; then
				welcometxt_suffix+="\n# ${CLR_YELLOW}env: $envprefix*${CLR_NONE}"
			else
				welcometxt_suffix+="\n# ${CLR_RED}env: $envprefix* (none found)${CLR_NONE}"
			fi
		fi
	done
fi
if [ -n "$allow_net" ]; then
	welcometxt_suffix+="\n# ${CLR_YELLOW}net: expose host${CLR_NONE}"
	docker_args+=("--network" "host")
fi
if [ -n "$allow_root" ]; then
	docker_args+=("--user" "root")
elif [ -n "$use_podman" ]; then
	# Ensure the default container user has the same file permissions
	# as the acting user on the host (match Docker Desktop for Mac behavior),
	# by mapping host UID/GID into the container. See podman-run(1) manual.
	docker_args+=("--user" "$(id -u):$(id -g)" "--userns=keep-id")
elif [ "$(uname -s)" == "Linux" ]; then
	docker_args+=("--user" "$(id -u):$(id -g)")
fi

if [ "$(uname -s)" == "Darwin" ] && [ "$(uname -m)" == "arm64" ]; then
	# Acknowledge "unrequested emulation" warning on Apple ARM
	docker_args+=("--platform" "linux/amd64")
fi

function teardown {
	# stop and remove temporary container
	# this should be redundant since 'docker run --rm' is meant to take care of
	# this already but at least with Terminal and Docker on macOS we know that
	# when the user closes their terminal tab, the fresh-node script is closed
	# properly (via trap), but the container keeps running for some reason.
	$DOCKER_BIN rm -f "$instance_tmp_name" >/dev/null 2>&1 || true
	# unlink tmp env file, if we used one.
	if [ -n "$envfile" ]; then
		rm -f "$envfile"
	fi
	# restore window title.
	echo -e '\033]2;\007'
}
trap teardown 0 SIGTERM SIGINT

# Setup: Change window title
echo -e '\033]2;'"$shortname"'\007\c'

# Optimisation: Make startup faster by not doing file reads or shell
# commands to generate the welcome message. Instead, prior to a release:
#
# 1. Run `FRESH_INTERNAL_RUNCMD=_fresh_versions ./bin/fresh-node`
# 2. Update the welcome_versions string below.
#
welcome_versions="â–‘ Node.js 18 â–‘ npm 10 â–‘ Firefox 115 â–‘ Chromium 120 â–‘ Debian 11 Bullseye"

welcome_text="$CLR_GREY# ðŸŒ± ${CLR_BOLD}${CLR_GREEN}Fresh $scriptversion$CLR_NONE$CLR_GREY $welcome_versions
# image: $imagename:$imageversion
# mount: $mountdest      âžŸ $mountsrc      (read-write)\
$CLR_NONE\
$welcometxt_suffix"

if [ -n "${FRESH_INTERNAL_RUNCMD:-}" ]; then
	runcmd="$FRESH_INTERNAL_RUNCMD"
	if [ "$runcmd" == "_fresh_versions" ]; then
		BASE="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
		docker_args+=("--mount" "type=bind,source=$BASE,target=/_fresh,readonly")
		runcmd=/_fresh/_fresh_versions
	fi
elif [ ${#POSITIONAL_ARGS[@]} -gt 0 ]; then
	runcmd="echo \"$welcome_text\n\";${POSITIONAL_ARGS[@]}"
else
	docker_args+=("--interactive" "--tty")
	runcmd="echo \"$welcome_text\n\";bash"
fi

# We expand the $docker_args in a special way to avoid passing "",
# which would be misinterpreted as docker-run argument.
# See <https://stackoverflow.com/a/7577209/319266>

$DOCKER_BIN run --rm --name "$instance_tmp_name" \
	--mount type=bind,source="$mountsrc",target="$mountdest"$bind_fastwrite \
	${docker_args[@]+"${docker_args[@]}"} \
	--entrypoint /bin/sh \
	--security-opt label=disable \
	"$imagename:$imageversion" \
	-c "cd $mountdest/;$runcmd"
