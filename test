#!/usr/bin/env -S -i /bin/bash

set -e
set -u

BASE="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ISMAC=$(test "$(uname -s)" = "Darwin" && echo "1" || echo "")
ISLINUX=$(test "$(uname -s)" = "Linux" && echo "1" || echo "")

# We use `env -i` to disable inheritance of environment variables from
# the developer's own command-line, so that test cases are in control
# over what is and isn't set. But, this means PATH is also cleared.
# Add at least /usr/local, because Docker or Podman may be there.
export PATH="$PATH:/usr/local/bin/"

cd $BASE

trim() {
	read input
	echo -n "${input%%[[:space:]]}"
}

pushd() {
	# quiet
	command pushd "$1" > /dev/null
}

popd() {
	# quiet
	command popd > /dev/null
}

title() {
	echo
	echo "test: $1..."
}


if_mac() {
	test -n "$ISMAC" && $1 || echo "      [skip: mac-only]"
}

if_linux() {
	test -n "$ISLINUX" && $1 || echo "      [skip: linux-only]"
}

assert() {
	actual="$1"
	expected="$2"
	printf "      \"${actual}\" == \"${expected}\"\n"
	test "$actual" = "$expected"
}

assert_lastline() {
	assert "$(echo "$1" | tail -n2 | trim)" "$2"
}

assert_contains() {
	printf "      contains \"$2\"\n"
	if [[ "$1" != *"$2"* ]]; then
		printf "\n$1"
		false
	fi
}

cleanup() {
	rm -rf ./fixtures
}
cleanup
trap cleanup 0 ERR

title "basic invocation"
{
	FRESH_INTERNAL_RUNCMD='exit' ./bin/fresh-node12 > /dev/null
}

title "forward exit code"
{
	code=0
	FRESH_INTERNAL_RUNCMD='exit 42' ./bin/fresh-node12 > /dev/null || code="$?"
	assert "$code" "42"
}

# This verifies both that the documentation is up-to-date with the
# the current image, and that the current image offers the currently
# documented software and versions thereof.
title "packages / advertised software versions"
{
	result_welcome=$(FRESH_INTERNAL_RUNCMD=exit ./bin/fresh-node12)
	# There are invisible control characters at the start and end of the output (window title setup),
	# that we need to strip out for the "contains" assertion to work.
	# This is currently done naturally by the output having a line break at the start and end,
	# and grepping only for lines we are intersted in.
	result_live=$(FRESH_INTERNAL_RUNCMD=_fresh_versions ./bin/fresh-node12 | grep --color=never '#')
	assert_contains "$result_welcome" "$result_live"
}

title "environment / default CHROMIUM_FLAGS"
{
	result=$(FRESH_INTERNAL_RUNCMD='echo $CHROMIUM_FLAGS' ./bin/fresh-node12)
	assert_lastline "$result" "--no-sandbox"
}

title "environment / warn if no MW_ vars with -env-mw"
{
	mkdir -p fixtures/10-env-mw
	pushd fixtures/10-env-mw

	result=$(FRESH_INTERNAL_RUNCMD='exit' $BASE/bin/fresh-node12 -env-mw)
	assert_contains "$result" "env: MW_*, MEDIAWIKI_* (none found)"

	popd
}

title "environment / protect FOO by default"
{
	export FOO="inherited"
	result=$(FRESH_INTERNAL_RUNCMD='echo $FOO' ./bin/fresh-node12)
	assert_lastline "$result" ""
}

title "environment / protect MW_FOO by default"
{
	export MW_FOO="inherited"
	result=$(FRESH_INTERNAL_RUNCMD='echo $MW_FOO' ./bin/fresh-node12)
	assert_lastline "$result" ""
}

title "environment / inherit MW_FOO with -env"
{
	export MW_FOO="inherited"
	result=$(FRESH_INTERNAL_RUNCMD='echo $MW_FOO' ./bin/fresh-node12 -env)
	assert_lastline "$result" "inherited"
}

title "environment / inherit MEDIAWIKI_FOO with -env"
{
	export MEDIAWIKI_FOO="inherited"
	result=$(FRESH_INTERNAL_RUNCMD='echo $MEDIAWIKI_FOO' ./bin/fresh-node12 -env)
	assert_lastline "$result" "inherited"
}

title "environment / inherit MEDIAWIKI_BAR .env file with -env"
{
	mkdir -p fixtures/10-env
	pushd fixtures/10-env
	echo "MEDIAWIKI_BAR=inherited" > .env

	result=$(FRESH_INTERNAL_RUNCMD='echo $MEDIAWIKI_BAR' $BASE/bin/fresh-node12 -env)
	assert_lastline "$result" "inherited"

	popd
}

title "environment / inherit MEDIAWIKI_BAZ .env file with -env, overriding exported var"
{
	mkdir -p fixtures/20-env
	pushd fixtures/20-env

	export MEDIAWIKI_BAZ="inherited"
	echo "MEDIAWIKI_BAZ=overridden" > .env
	result=$(FRESH_INTERNAL_RUNCMD='echo $MEDIAWIKI_BAZ' $BASE/bin/fresh-node12 -env)
	assert_lastline "$result" "overridden"

	popd
}

title "environment / warn if no SAUCE_ vars with -env-sauce"
{
	mkdir -p fixtures/30-env
	pushd fixtures/30-env

	export MEDIAWIKI_FOO="FOO"
	result=$(FRESH_INTERNAL_RUNCMD='exit' $BASE/bin/fresh-node12 -env-sauce)
	assert_contains "$result" "env: SAUCE_* (none found)"

	popd
}

title "environment / protect FOO even with -env"
{
	export FOO="inherited"
	result=$(FRESH_INTERNAL_RUNCMD='echo $FOO' ./bin/fresh-node12 -env)
	assert_lastline "$result" ""
}

title "user / default (Linux)"
位() {
	host_uid=$(id -u)
	result=$(FRESH_INTERNAL_RUNCMD='/usr/bin/id -u' ./bin/fresh-node12)
	assert_lastline "$result" "$host_uid"
}
if_linux 位
# user ID will not be passed on macOS.

title "user / default (macOS)"
位() {
	result=$(FRESH_INTERNAL_RUNCMD='/usr/bin/id -un' ./bin/fresh-node12)
	assert_lastline "$result" "nobody"
}
if_mac 位

title "user / with -root"
{
	result=$(FRESH_INTERNAL_RUNCMD='/usr/bin/id -un' ./bin/fresh-node12 -root)
	assert_lastline "$result" "root"
}

title "mount / expose current directory as readable"
{
	mkdir -p fixtures/some/dir/10-read
	pushd fixtures/some/dir/10-read
	echo "exposed content" > file.txt

	result=$(FRESH_INTERNAL_RUNCMD='cat /10-read/file.txt' $BASE/bin/fresh-node12) || true
	assert_lastline "$result" "exposed content"

	popd
}

title "mount / expose current directory as writable"
{
	mkdir -p fixtures/some/dir/20-write
	pushd fixtures/some/dir/20-write
	echo "original content" > file.txt

	FRESH_INTERNAL_RUNCMD='echo changed content > /20-write/file.txt' $BASE/bin/fresh-node12 > /dev/null || true
	result=$(cat file.txt)
	assert_lastline "$result" "changed content"

	popd
}

title "mount / cannot write to .git subdirectory file"
{
	mkdir -p fixtures/some/dir/30-git/.git
	pushd fixtures/some/dir/30-git
	echo "original content" > .git/file.txt
	code=0

	FRESH_INTERNAL_RUNCMD='echo changed content > /30-git/.git/file.txt' $BASE/bin/fresh-node12 > /dev/null || code="$?"
	result=$(cat .git/file.txt)
	assert_lastline "$result" "original content"
	assert "$code" "2"

	popd
}

title "mount / cannot create a .git subdirectory file"
{
	mkdir -p fixtures/some/dir/40-git/.git
	pushd fixtures/some/dir/40-git
	code=0

	FRESH_INTERNAL_RUNCMD='touch /40-git/.git/file.txt' $BASE/bin/fresh-node12 > /dev/null || code="$?"
	result=$(test -f .git/file.txt && echo created file || echo not created)
	assert "$result" "not created"
	assert "$code" "1"

	popd
}
